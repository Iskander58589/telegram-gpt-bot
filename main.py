import logging
import requests
import asyncio
import nest_asyncio
import os
import time
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters
from keep_alive import keep_alive

nest_asyncio.apply()

# üîê –ö–ª—é—á–∏
OPENROUTER_API_KEY = "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"
TELEGRAM_TOKEN = "8003773351:AAHimIBFtARHS_1chitfqYfP397dhtWV85s"

logging.basicConfig(level=logging.INFO)

# üì° –ó–∞–ø—Ä–æ—Å –∫ OpenRouter
def ask_openrouter(prompt):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}]
    }
    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        if response.ok:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"–û—à–∏–±–∫–∞: {response.status_code} ‚Äî {response.text}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

# ü§ñ –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.chat.send_action("typing")
    reply = ask_openrouter(user_text)
    await update.message.reply_text(reply)

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –ò–ò-–±–æ—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

# üîÅ –¶–∏–∫–ª —Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
def main_loop():
    keep_alive()
    while True:
        try:
            asyncio.run(run_bot())
        except Exception as e:
            print(f"‚ùå –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
            print("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

if __name__ == "__main__":
    main_loop()